
import os
import telebot
from flask import Flask, request
import threading
import time
import requests
from telebot import types

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
REPL_URL = f"https://{os.getenv('REPL_SLUG', 'telegram-bot')}.{os.getenv('REPL_OWNER', 'user')}.repl.co"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    profile_button = types.KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    markup.add(profile_button)
    
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n" \
                   "–Ø —ç—Ö–æ-–±–æ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ–≤—Ç–æ—Ä—é –µ–≥–æ.\n" \
                   "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ."
    
    bot.reply_to(message, welcome_text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@bot.message_handler(func=lambda message: message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
def show_profile(message):
    user = message.from_user
    profile_info = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:\n\n" \
                   f"üÜî ID: {user.id}\n" \
                   f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n" \
                   f"üë• –§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n" \
                   f"üìù Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n" \
                   f"üåê –Ø–∑—ã–∫: {user.language_code or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n" \
                   f"ü§ñ –ë–æ—Ç: {'–î–∞' if user.is_bot else '–ù–µ—Ç'}"
    
    bot.reply_to(message, profile_info)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—ç—Ö–æ)
@bot.message_handler(func=lambda message: True, content_types=['text'])
def echo_message(message):
    echo_text = f"–≠—Ö–æ: {message.text}"
    bot.reply_to(message, echo_text)

# Flask –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    try:
        json_str = request.get_data().decode('UTF-8')
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return '', 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return '', 500

# Keep-alive –º–∞—Ä—à—Ä—É—Ç
@app.route('/')
def index():
    return "‚úÖ Telegram Bot @nbmjapan_bot is running! ü§ñ"

@app.route('/health')
def health():
    return {'status': 'ok', 'bot': 'nbmjapan_bot'}, 200

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
def set_webhook():
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
        bot.remove_webhook()
        time.sleep(2)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
        webhook_url = f"{REPL_URL}/{BOT_TOKEN}"
        success = bot.set_webhook(url=webhook_url)
        
        if success:
            print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
            webhook_info = bot.get_webhook_info()
            print(f"üì° URL –≤–µ–±—Ö—É–∫–∞: {webhook_info.url}")
            print(f"üîÑ –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {webhook_info.pending_update_count}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞")
        
        return success
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è keep-alive –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
def keep_alive():
    def run_server():
        app.run(host='0.0.0.0', port=5000, debug=False)
    
    server_thread = threading.Thread(target=run_server)
    server_thread.daemon = True
    server_thread.start()
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    time.sleep(5)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_set = set_webhook()
    
    if not webhook_set:
        print("‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)
        set_webhook()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ @nbmjapan_bot...")
    print(f"üîó Repl URL: {REPL_URL}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive —Å–µ—Ä–≤–µ—Ä
    keep_alive()
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üì± –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    try:
        while True:
            time.sleep(30)
            # –ü–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            try:
                response = requests.get(f"{REPL_URL}/health", timeout=10)
                if response.status_code == 200:
                    print("üíö Keep-alive ping —É—Å–ø–µ—à–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è Keep-alive ping failed: {e}")
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        bot.remove_webhook()

if __name__ == "__main__":
    main()
