import os
import threading
import json
from datetime import datetime
from typing import Tuple, Optional
from flask import Flask, request
import telebot
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from keepalive import keep_alive
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

app = Flask(__name__)

class GoogleSheetsManager:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Google Sheets."""
        self.service = None
        self._initialize_service()

    def _initialize_service(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API."""
        try:
            service_account_info = self._get_service_account_info()
            spreadsheet_id = os.getenv('GOOGLE_SPREADSHEET_ID')
            
            if not service_account_info or not spreadsheet_id:
                raise ValueError("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

            creds = Credentials.from_service_account_info(
                service_account_info,
                scopes=['https://www.googleapis.com/auth/spreadsheets']
            )
            self.service = build('sheets', 'v4', credentials=creds)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            self.service = None

    def get_client_info(self, telegram_id: str) -> Optional[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –ø–æ Telegram ID"""
        try:
            result = self.service.spreadsheets().values().get(
                spreadsheetId=os.getenv('GOOGLE_SPREADSHEET_ID'),
                range='–ö–ª–∏–µ–Ω—Ç—ã!A:I'
            ).execute()
            
            for row in result.get('values', []):
                if len(row) > 5 and row[5] == str(telegram_id):
                    return {
                        'first_name': row[0] if len(row) > 0 else None,
                        'last_name': row[1] if len(row) > 1 else None,
                        'phone': row[2] if len(row) > 2 else None,
                        'city': row[3] if len(row) > 3 else None,
                        'comments': row[4] if len(row) > 4 else None,
                        'status': row[6] if len(row) > 6 else None,
                        'last_updated': row[7] if len(row) > 7 else None,
                        'status_comment': row[8] if len(row) > 8 else None
                    }
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
            return None
    
    def _get_service_account_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        try:
            return json.loads(os.getenv('GOOGLE_SERVICE_ACCOUNT_JSON', '{}'))
        except json.JSONDecodeError:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GOOGLE_SERVICE_ACCOUNT_JSON")
            return {}

    def add_client(self, first_name: str, last_name: str, phone: str, 
                  city: str, comments: str, telegram_id: str) -> Tuple[bool, str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É."""
        if not self.service:
            return False, "–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

        try:
            values = [
                first_name, last_name, phone, city, 
                comments, str(telegram_id),
                "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "", ""
            ]
            
            body = {'values': [values]}
            
            result = self.service.spreadsheets().values().append(
                spreadsheetId=os.getenv('GOOGLE_SPREADSHEET_ID'),
                range='–ö–ª–∏–µ–Ω—Ç—ã!A:I',
                valueInputOption='USER_ENTERED',
                insertDataOption='INSERT_ROWS',
                body=body
            ).execute()
            
            return True, "–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
            
        except HttpError as e:
            error_msg = f"–û—à–∏–±–∫–∞ API: {e.content.decode()}"
            print(f"‚ùå {error_msg}")
            return False, error_msg
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}"

    def update_status(self, telegram_id: str, new_status: str, 
                    comment: str = "") -> Tuple[bool, str]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞."""
        if not self.service:
            return False, "–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

        try:
            result = self.service.spreadsheets().values().get(
                spreadsheetId=os.getenv('GOOGLE_SPREADSHEET_ID'),
                range='–ö–ª–∏–µ–Ω—Ç—ã!A:I'
            ).execute()
            
            rows = result.get('values', [])
            for i, row in enumerate(rows):
                if len(row) > 5 and row[5] == str(telegram_id):
                    range_name = f'–ö–ª–∏–µ–Ω—Ç—ã!G{i+1}:I{i+1}'
                    update_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    
                    body = {
                        'values': [[new_status, update_time, comment]]
                    }
                    
                    self.service.spreadsheets().values().update(
                        spreadsheetId=os.getenv('GOOGLE_SPREADSHEET_ID'),
                        range=range_name,
                        valueInputOption='USER_ENTERED',
                        body=body
                    ).execute()
                    
                    return True, "–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
            
            return False, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
            return False, str(e)

    def setup_headers(self) -> Tuple[bool, str]:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã."""
        headers = [
            "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ì–æ—Ä–æ–¥", 
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "Telegram ID", 
            "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç–∞—Ç—É—Å–∞"
        ]
        
        try:
            body = {'values': [headers]}
            self.service.spreadsheets().values().update(
                spreadsheetId=os.getenv('GOOGLE_SPREADSHEET_ID'),
                range='–ö–ª–∏–µ–Ω—Ç—ã!A1:I1',
                valueInputOption='RAW',
                body=body
            ).execute()
            return True, "–ó–∞–≥–æ–ª–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        except Exception as e:
            return False, str(e)

    def get_client_status(self, telegram_id: str) -> Optional[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞."""
        try:
            result = self.service.spreadsheets().values().get(
                spreadsheetId=os.getenv('GOOGLE_SPREADSHEET_ID'),
                range='–ö–ª–∏–µ–Ω—Ç—ã!A:I'
            ).execute()
            
            for row in result.get('values', []):
                if len(row) > 5 and row[5] == str(telegram_id):
                    return {
                        'status': row[6] if len(row) > 6 else None,
                        'last_updated': row[7] if len(row) > 7 else None,
                        'comment': row[8] if len(row) > 8 else None
                    }
            return None
        except Exception:
            return None

    def client_exists(self, telegram_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º Telegram ID."""
        if not self.service:
            return False

        try:
            result = self.service.spreadsheets().values().get(
                spreadsheetId=os.getenv('GOOGLE_SPREADSHEET_ID'),
                range='–ö–ª–∏–µ–Ω—Ç—ã!A:I'
            ).execute()
            
            for row in result.get('values', []):
                if len(row) > 5 and row[5] == str(telegram_id):
                    return True
            return False
        except Exception:
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_TOKEN') or os.getenv('BOT_TOKEN') or '8102280931:AAFNx7zZOAV4QjRjNnNzB6edsgeXsLBFQss'
bot = telebot.TeleBot(TOKEN)
sheets_manager = GoogleSheetsManager()
user_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=2)
    buttons = [
        KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"),
        KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
        KeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"),
        KeyboardButton("–ü–æ–º–æ—â—å")
    ]
    markup.add(*buttons)
    return markup

def create_cancel_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–û—Ç–º–µ–Ω–∞")
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(
        chat_id=message.chat.id,
        text="üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NBM Japan!\n"
             "üåè –í–∞—à–∞ –Ω–∞–¥–µ–∂–Ω–∞—è –∫–∞—Ä–≥–æ –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –Ø–ø–æ–Ω–∏–∏\n\n"
             "üì¶ –ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ\n"
             "üéå –ü—Ä—è–º—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –Ø–ø–æ–Ω–∏–∏\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
def handle_status_check(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    status_info = sheets_manager.get_client_status(str(message.from_user.id))
    
    if not status_info:
        bot.send_message(
            message.chat.id,
            "‚ùå –í–∞—à —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
            reply_markup=create_keyboard()
        )
        return
    
    status = status_info.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
    last_updated = status_info.get('last_updated', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    comment = status_info.get('comment', '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')
    
    status_descriptions = {
        "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ": "üîÑ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω": "üö¢ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –Ø–ø–æ–Ω–∏–∏",
        "–í –ø—É—Ç–∏": "‚úàÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –≤ –ø—É—Ç–∏",
        "–ü—Ä–∏–±—ã–ª": "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–±—ã–ª –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏"
    }
    
    description = status_descriptions.get(status, f"–°—Ç–∞—Ç—É—Å: {status}")
    
    response = (
        f"üì¶ <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"{description}\n\n"
        #f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {last_updated}\n"
        #f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}"
    )
    
    bot.send_message(
        message.chat.id,
        response,
        parse_mode='HTML',
        reply_markup=create_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞")
def handle_registration_start(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è—è, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ."""
    telegram_id = str(message.from_user.id)
    
    if sheets_manager.client_exists(telegram_id):
        bot.send_message(
            message.chat.id,
            "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ. "
            "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.",
            reply_markup=create_keyboard()
        )
        return
    
    user_states[message.chat.id] = {'state': 'awaiting_first_name'}
    bot.send_message(
        chat_id=message.chat.id,
        text="üìù –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=create_cancel_keyboard()
    )

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'awaiting_first_name')
def handle_first_name(message):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        del user_states[message.chat.id]
        bot.send_message(
            message.chat.id,
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=create_keyboard()
        )
        return
    
    user_states[message.chat.id] = {
        'state': 'awaiting_last_name',
        'first_name': message.text
    }
    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
        reply_markup=create_cancel_keyboard()
    )

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'awaiting_last_name')
def handle_last_name(message):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        del user_states[message.chat.id]
        bot.send_message(
            message.chat.id,
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=create_keyboard()
        )
        return
    
    user_states[message.chat.id]['state'] = 'awaiting_phone'
    user_states[message.chat.id]['last_name'] = message.text
    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=create_cancel_keyboard()
    )

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'awaiting_phone')
def handle_phone(message):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        del user_states[message.chat.id]
        bot.send_message(
            message.chat.id,
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=create_keyboard()
        )
        return
    
    user_states[message.chat.id]['state'] = 'awaiting_city'
    user_states[message.chat.id]['phone'] = message.text
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=create_cancel_keyboard()
    )

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'awaiting_city')
def handle_city(message):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        del user_states[message.chat.id]
        bot.send_message(
            message.chat.id,
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=create_keyboard()
        )
        return
    
    user_states[message.chat.id]['state'] = 'awaiting_comments'
    user_states[message.chat.id]['city'] = message.text
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):",
        reply_markup=create_cancel_keyboard()
    )

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'awaiting_comments')
def handle_comments(message):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        del user_states[message.chat.id]
        bot.send_message(
            message.chat.id,
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=create_keyboard()
        )
        return
    
    user_states[message.chat.id]['comments'] = message.text
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    chat_id = message.chat.id
    user_data = user_states[chat_id]
    
    success, response = sheets_manager.add_client(
        first_name=user_data.get('first_name', ''),
        last_name=user_data.get('last_name', ''),
        phone=user_data.get('phone', ''),
        city=user_data.get('city', ''),
        comments=user_data.get('comments', ''),
        telegram_id=str(message.from_user.id)
    )
    
    if success:
        bot.send_message(
            chat_id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–°–ø–∞—Å–∏–±–æ, {user_data['first_name']}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.",
            reply_markup=create_keyboard()
        )
    else:
        bot.send_message(
            chat_id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response}",
            reply_markup=create_keyboard()
        )
    
    del user_states[chat_id]

# –í–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_data = request.get_json()
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return "OK", 200
    return "Bad Request", 400

def run_bot():
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        bot.remove_webhook()
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling!")
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == '__main__':
    keep_alive()
    run_bot()