
import os
import json
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

class GoogleSheetsManager:
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.service_account_info = json.loads(os.getenv('GOOGLE_SERVICE_ACCOUNT_JSON', '{}'))
        self.spreadsheet_id = os.getenv('GOOGLE_SPREADSHEET_ID', '')
        self.sheet_name = os.getenv('GOOGLE_SHEET_NAME', '–ö–ª–∏–µ–Ω—Ç—ã')
        
        if not self.service_account_info:
            print("‚ö†Ô∏è GOOGLE_SERVICE_ACCOUNT_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            self.service = None
            return
        
        if not self.spreadsheet_id:
            print("‚ö†Ô∏è GOOGLE_SPREADSHEET_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            self.service = None
            return
        
        print(f"üìä –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ: {self.spreadsheet_id}")
        print(f"üìÑ –õ–∏—Å—Ç: {self.sheet_name}")
            
        try:
            credentials = Credentials.from_service_account_info(
                self.service_account_info,
                scopes=['https://www.googleapis.com/auth/spreadsheets']
            )
            self.service = build('sheets', 'v4', credentials=credentials)
            print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            self.service = None
    
    def add_client(self, first_name, last_name, phone, city, comments, telegram_id):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ Google Sheets"""
        if not self.service:
            return False, "Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        try:
            print(f"üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞: {first_name} {last_name}, {phone}, {city}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            values = [[first_name, last_name, phone, city, comments, telegram_id]]
            
            body = {
                'values': values
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            result = self.service.spreadsheets().values().append(
                spreadsheetId=self.spreadsheet_id,
                range=f'{self.sheet_name}!A:F',
                valueInputOption='RAW',
                insertDataOption='INSERT_ROWS',
                body=body
            ).execute()
            
            updated_rows = result.get('updates', {}).get('updatedRows', 0)
            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {updated_rows}")
            return True, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É NBM Japan! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤! üéâ"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Google Sheets: {str(e)}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {str(e)}"
    
    def setup_headers(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if not self.service:
            return False, "Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        try:
            headers = [['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ì–æ—Ä–æ–¥/–°–µ–ª–æ', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', 'Telegram ID']]
            
            body = {
                'values': headers
            }
            
            result = self.service.spreadsheets().values().update(
                spreadsheetId=self.spreadsheet_id,
                range=f'{self.sheet_name}!A1:F1',
                valueInputOption='RAW',
                body=body
            ).execute()
            
            return True, "–ó–∞–≥–æ–ª–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {str(e)}"
